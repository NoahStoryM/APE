// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ReactDom from "react-dom";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";

((require("normalize.css")));

((require("@fortawesome/fontawesome-free/js/solid.js")));

((require("@fortawesome/fontawesome-free/js/regular.js")));

((require("@fortawesome/fontawesome-free/js/fontawesome.js")));

((require("./app.css")));

function sum(xs) {
  return Belt_Array.reduce(xs, 0, (function (a, b) {
                return a + b;
              }));
}

var entriesMock = [
  {
    quantity: 1,
    price: 1,
    isShipped: false
  },
  {
    quantity: 1,
    price: 1,
    isShipped: true
  },
  {
    quantity: 2,
    price: 1,
    isShipped: false
  },
  {
    quantity: 3,
    price: 1,
    isShipped: false
  },
  {
    quantity: 4,
    price: 1,
    isShipped: false
  },
  {
    quantity: 5,
    price: 1,
    isShipped: true
  }
];

function computePrice(shipFactor, param) {
  var computedPrice = param.quantity * param.price;
  var factorPrice = computedPrice * (
    param.isShipped ? shipFactor / 100 : 0
  );
  return computedPrice + factorPrice;
}

function totalQuantity(entries) {
  return sum(Belt_Array.map(entries, (function (e) {
                    return e.quantity;
                  })));
}

function priceMean(entries, shipFactor) {
  var cPriceF = function (param) {
    return computePrice(shipFactor, param);
  };
  var prices = Belt_Array.map(entries, cPriceF);
  var totalQ = totalQuantity(entries);
  return sum(prices) / totalQ;
}

var floatPattern = "-?[0-9]*\\.?[0-9]*";

function fmtFloat(number) {
  return number.toFixed(2);
}

function updateInputTxt(setter, evt) {
  evt.preventDefault();
  var newValue = evt.target.value;
  console.log(Belt_Float.fromString(newValue));
  return Curry._1(setter, (function (_oldValue) {
                return newValue;
              }));
}

function prependEntry(quantity, price, isShipped, entries) {
  var newEntry_quantity = Number(quantity);
  var newEntry_price = Number(price);
  var newEntry = {
    quantity: newEntry_quantity,
    price: newEntry_price,
    isShipped: isShipped
  };
  console.log(newEntry);
  return Belt_Array.concat([newEntry], entries);
}

function App$ViewHeader(Props) {
  var entries = Props.entries;
  var setEntries = Props.setEntries;
  var coefMin = Props.coefMin;
  var coefMax = Props.coefMax;
  var shipFactor = Props.shipFactor;
  var totalQuantity$1 = totalQuantity(entries);
  var priceMean$1 = priceMean(entries, Number(shipFactor));
  var priceMeanMin = priceMean$1 / Number(coefMin);
  var priceMeanMax = priceMean$1 / Number(coefMax);
  var match = React.useState(function () {
        return "";
      });
  var setQuantity = match[1];
  var quantity = match[0];
  var match$1 = React.useState(function () {
        return "";
      });
  var setPrice = match$1[1];
  var price = match$1[0];
  var match$2 = React.useState(function () {
        return true;
      });
  var setIsShipped = match$2[1];
  var isShipped = match$2[0];
  return React.createElement("header", undefined, React.createElement("div", {
                  id: "results"
                }, React.createElement("h3", undefined, "Total Qté"), React.createElement("h3", undefined, "Prix Moy"), React.createElement("h3", undefined, "Moy Min"), React.createElement("h3", undefined, "Moy Max"), React.createElement("p", {
                      id: "total-quantity"
                    }, totalQuantity$1.toFixed(2)), React.createElement("p", {
                      id: "price-mean"
                    }, priceMean$1.toFixed(2)), React.createElement("p", {
                      id: "price-mean-min"
                    }, priceMeanMin.toFixed(2)), React.createElement("p", {
                      id: "price-mean-max"
                    }, priceMeanMax.toFixed(2))), React.createElement("div", {
                  id: "user-inputs"
                }, React.createElement("span", undefined, React.createElement("label", {
                          className: "for-input-text",
                          htmlFor: "new-entry:quantity"
                        }, React.createElement("p", undefined, "Qté .."), React.createElement("input", {
                              id: "new-entry:quantity",
                              autoFocus: true,
                              pattern: floatPattern,
                              type: "text",
                              value: quantity,
                              onChange: (function (param) {
                                  return updateInputTxt(setQuantity, param);
                                })
                            }))), React.createElement("span", undefined, React.createElement("label", {
                          className: "for-input-text",
                          htmlFor: "new-entry:price"
                        }, React.createElement("p", undefined, "Prix ..."), React.createElement("input", {
                              id: "new-entry:price",
                              pattern: floatPattern,
                              type: "text",
                              value: price,
                              onChange: (function (param) {
                                  return updateInputTxt(setPrice, param);
                                })
                            }))), React.createElement("span", undefined, React.createElement("label", {
                          className: "for-checkbox",
                          htmlFor: "new-entry:shipping"
                        }, React.createElement("input", {
                              id: "new-entry:shipping",
                              checked: isShipped,
                              type: "checkbox",
                              onChange: (function (evt) {
                                  return Curry._1(setIsShipped, (function (param) {
                                                return evt.target.checked;
                                              }));
                                })
                            }), React.createElement("i", {
                              className: "fas fa-truck"
                            }))), React.createElement("span", undefined, React.createElement("button", {
                          onClick: (function (_evt) {
                              Curry._1(setEntries, (function (param) {
                                      return prependEntry(quantity, price, isShipped, param);
                                    }));
                              Curry._1(setQuantity, (function (param) {
                                      return "";
                                    }));
                              Curry._1(setPrice, (function (param) {
                                      return "";
                                    }));
                              return Curry._1(setIsShipped, (function (param) {
                                            return true;
                                          }));
                            })
                        }, React.createElement("i", {
                              className: "fas fa-plus"
                            })))));
}

var ViewHeader = {
  prependEntry: prependEntry,
  make: App$ViewHeader
};

function App$ViewFooter(Props) {
  var coefMin = Props.coefMin;
  var setCoefMin = Props.setCoefMin;
  var coefMax = Props.coefMax;
  var setCoefMax = Props.setCoefMax;
  var shipFactor = Props.shipFactor;
  var setShipFactor = Props.setShipFactor;
  return React.createElement("footer", undefined, React.createElement("span", undefined, React.createElement("label", {
                      className: "for-input-text"
                    }, React.createElement("p", undefined, "Coef min ..."), React.createElement("input", {
                          id: "coefMin",
                          pattern: floatPattern,
                          type: "text",
                          value: coefMin,
                          onChange: (function (param) {
                              return updateInputTxt(setCoefMin, param);
                            })
                        }))), React.createElement("span", undefined, React.createElement("label", {
                      className: "for-input-text"
                    }, React.createElement("p", undefined, "Coef max ..."), React.createElement("input", {
                          id: "coefMax",
                          pattern: floatPattern,
                          type: "text",
                          value: coefMax,
                          onChange: (function (param) {
                              return updateInputTxt(setCoefMax, param);
                            })
                        }))), React.createElement("span", undefined, React.createElement("label", {
                      className: "for-input-text",
                      htmlFor: "shipFactor"
                    }, React.createElement("p", undefined, React.createElement("i", {
                              className: "fas fa-truck"
                            }), "(%)"), React.createElement("input", {
                          id: "shipFactor",
                          pattern: floatPattern,
                          type: "text",
                          value: shipFactor,
                          onChange: (function (param) {
                              return updateInputTxt(setShipFactor, param);
                            })
                        }))), React.createElement("span", undefined, React.createElement("button", {
                      name: "reset",
                      type: "reset"
                    }, React.createElement("i", {
                          className: "fas fa-redo"
                        }))));
}

var ViewFooter = {
  make: App$ViewFooter
};

function App$ViewMain(Props) {
  var entries = Props.entries;
  var setEntries = Props.setEntries;
  var renderEntry = function (idx, e) {
    return React.createElement("div", {
                key: String(idx)
              }, React.createElement("span", undefined, e.quantity.toFixed(2)), React.createElement("span", undefined, e.price.toFixed(2)), React.createElement("span", undefined, React.createElement("label", {
                        className: "for-checkbox"
                      }, React.createElement("input", {
                            checked: e.isShipped,
                            type: "checkbox",
                            onChange: (function (param) {
                                console.log("Toggle shipping of row #" + String(idx));
                                return Curry._1(setEntries, (function (oldEntries) {
                                              return Belt_Array.mapWithIndex(oldEntries, (function (idx$p, e) {
                                                            if (idx === idx$p) {
                                                              return {
                                                                      quantity: e.quantity,
                                                                      price: e.price,
                                                                      isShipped: !e.isShipped
                                                                    };
                                                            } else {
                                                              return e;
                                                            }
                                                          }));
                                            }));
                              })
                          }), React.createElement("i", {
                            className: "fas fa-truck"
                          }))), React.createElement("span", undefined, React.createElement("button", {
                        onClick: (function (param) {
                            console.log("Delete row #" + String(idx));
                            return Curry._1(setEntries, (function (oldEntries) {
                                          return Belt_Array.keepWithIndex(oldEntries, (function (param, idx$p) {
                                                        return idx !== idx$p;
                                                      }));
                                        }));
                          })
                      }, React.createElement("i", {
                            className: "far fa-trash-alt"
                          }))));
  };
  return React.createElement("main", undefined, Belt_Array.mapWithIndex(entries, renderEntry));
}

var ViewMain = {
  make: App$ViewMain
};

function App$App(Props) {
  var match = React.useState(function () {
        return (0.8).toFixed(2);
      });
  var coefMin = match[0];
  var match$1 = React.useState(function () {
        return (0.7).toFixed(2);
      });
  var coefMax = match$1[0];
  var match$2 = React.useState(function () {
        return (3).toFixed(2);
      });
  var shipFactor = match$2[0];
  var match$3 = React.useState(function () {
        return entriesMock;
      });
  var setEntries = match$3[1];
  var entries = match$3[0];
  return [
          React.createElement(App$ViewHeader, {
                entries: entries,
                setEntries: setEntries,
                coefMin: coefMin,
                coefMax: coefMax,
                shipFactor: shipFactor,
                key: "header"
              }),
          React.createElement(App$ViewMain, {
                entries: entries,
                setEntries: setEntries,
                key: "main"
              }),
          React.createElement(App$ViewFooter, {
                coefMin: coefMin,
                setCoefMin: match[1],
                coefMax: coefMax,
                setCoefMax: match$1[1],
                shipFactor: shipFactor,
                setShipFactor: match$2[1],
                key: "footer"
              })
        ];
}

var App = {
  make: App$App
};

var root = document.querySelector("#root");

if (!(root == null)) {
  ReactDom.render(React.createElement(App$App, {}), root);
}

var defaultCoefMin = 0.8;

var defaultCoefMax = 0.7;

var defaultShipFactor = 3;

var defaultIsShipped = true;

export {
  sum ,
  defaultCoefMin ,
  defaultCoefMax ,
  defaultShipFactor ,
  defaultIsShipped ,
  entriesMock ,
  computePrice ,
  totalQuantity ,
  priceMean ,
  floatPattern ,
  fmtFloat ,
  updateInputTxt ,
  ViewHeader ,
  ViewFooter ,
  ViewMain ,
  App ,
  
}
/*  Not a pure module */
