#!/usr/bin/env racket
;; -*- mode: racket; -*-
#lang racket/base

(require racket/cmdline
         racket/system
         racket/path)

;; Template for the asm code
(define $asm-code
#<<HERESTRING
  .intel_syntax noprefix
  .global _the_asm_code
  .text

format:
  .ascii "%d\n"

_the_asm_code:
  mov eax, ~a
  ret
HERESTRING
  )

;; Execute a shell command
(define (exec cmd)
  (displayln cmd)
  (system cmd))

;; Compile a program
(define (compile number)
  (format $asm-code number))

;; Cmd
(define file-to-compile
  (command-line
   #:usage-help "Compiler for the int language"
   #:args (filename)
   filename))

(cond
  [(file-exists? file-to-compile)
   ;; Get the number from the `file-to-compile`
   (define the-number
     (call-with-input-file file-to-compile
       (λ (in) (string->number (read-line in)))))

   ;; Produce the asm file
   (define asm-output-name "_the_asm_code.s")
   (with-output-to-file asm-output-name #:exists 'replace
     (λ () (printf (compile the-number))))

   ;; Compile the whole stuff:
   ;; > as --32 -o <asm-object-name> _the_asm_code.s
   (define asm-object-name (path-replace-extension asm-output-name ".o"))
   (define asm-cmd (format "as --32 -o ~a ~a" asm-object-name asm-output-name))
   (exec asm-cmd)
   ;; > gcc -m32 -o <executable-name> _the_asm_code.o main.c
   (define executable-name (path-replace-extension file-to-compile ""))
   (define gcc-cmd (format "gcc -m32 -o ~a ~a main.c"
                           executable-name
                           asm-object-name))
   (exec gcc-cmd)]
  [else
   (error (format "File error: ~s: No such file or directory"
                  file-to-compile))])


;; TODO: evaluating a lang file produces (on output), the input for an asm one.
